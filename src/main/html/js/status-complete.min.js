// status 0.1 Copyright 2014, Tim Boudreau, MIT License
var app = angular.module('status', []); app.directive('tbStatus', function() { return { restrict: 'E', template: '<style>.statusProblem{background-color:rgba(187,80,80,0.75)}.statusSuccess{background-color:rgba(80,187,80,0.75)}.statusInfo{background-color:rgba(80,80,187,0.75)}.statusTextStart{font-size:0;opacity:.25}.statusTextEnd{font-size:1.5em;opacity:.75}.statusStart{min-width:0;min-height:0;height:0}.statusEnd{height:45%;min-height:45%;min-width:65.5%}.statusEndSmall{height:25%;top:70%!important;min-height:25%;min-width:35%}.statusEndSmallActions{height:50%;min-height:25%;min-width:40%}.statusBoxStart{top:50%;transform:rotate(360deg);-moz-transform:rotate(360deg);-webkit-transform:rotate(360deg);opacity:.25}.statusBoxEnd{left:25%;top:50%;transform:rotate(-7.5deg);-moz-transform:rotate(-7.5deg);-webkit-transform:rotate(-7.5deg);opacity:.85}.statusShowing{left:0!important}.statusHiding{left:100%}.status{position:fixed;border:white 2px dashed;border-radius:9em;display:block;font-family:\'Varela Round\';font-size:2em;color:white;transition-property:all;transition-duration:1.5s;transition-timing-function:cubic-bezier}@media(max-width:640px),handheld{.status{font-size:1em}}.actionButton{font-size:2rem;opacity:.9}.status table{width:100%;height:100%;margin-left:5px;margin-right:5px;transition:all 1.5s ease}.status td{width:100%;text-align:center;transition-property:all;transition-duration:1.5s;transition-timing-function:cubic-bezier}.firstMsg{font-size:.8em;font-color:#ccc}</style><div class=\'status\' ng-click=\'clear()\' ng-show=\'statusShowing\' ng-class="{statusSuccess : !problem, statusInfo : info && !problem, statusBoxStart: !statusSize, statusBoxEnd : statusSize, statusStart : !statusSize, statusProblem : problem, statusEnd : statusSize && !small, statusEndSmall : statusSize && small && !actions, statusEndSmallActions : statusSize && small && actions, statusHiding : hiding, statusShowing : !hiding}"> <table> <tr> <td ng-class="{statusTextStart: !statusSize, statusTextEnd : statusSize, statusStart : !statusSize, statusEnd : statusSize}"> {{statusValue}} <span ng-repeat="action in actions" class="statusAction"> <br/> <button ng-class="{statusTextStart : !statusSize, statusTextEnd : statusSize}" class=\'btn btn-primary actionButton\' ng-click="action.action()">{{action.name}}</button> </span> <span ng-show="!msgShown" class="firstMsg"> <br/> (click to hide) </span> </td> </tr> </table> </div> \n', controller: Status }; }); function Status($scope, $status) { $scope.msgShown = false; $scope.hiding = true; $scope.timeout = null; $scope.problem = false; $scope.clear = $status.clear; var onTimeout = showStatus; function startTimer(to, func) { change(); if (typeof to === 'function') { func = to; to = 1500; } to = to || 1500; onTimeout = func; $scope.timeout = setTimeout(function() { $scope.$apply(onTimeout); }, to); } function showStatus() { $scope.statusShowing = true; $scope.statusSize = true; startTimer($scope.clearAfter || 25000, hideStatus); } function hideStatus() { if (!$scope.$$phase) { $scope.$apply(function() { startTimer(statusHidden); $scope.statusSize = false; $scope.hiding = true; }); } else { startTimer(statusHidden); $scope.statusSize = false; $scope.hiding = true; } } function statusHidden() { $scope.statusShowing = false; $scope.statusSize = false; $scope.statusValue = null; $scope.msgShown = true; $scope.actions = null; $scope.problem = false; $scope.info = false; $scope.small = false; } function change() { if ($scope.timeout) { clearTimeout($scope.timeout); } } function statusSet(val) { $scope.small = val.msg.length <= 45; $scope.statusShowing = true; $scope.statusValue = val.msg; $scope.hiding = false; startTimer(1, showStatus); } function statusCleared() { change(); $scope.hiding = true; hideStatus(); } $status.addListener(function(val) { if (val) { if (val.msg === $scope.statusValue) { return; } change(); $scope.actions = val.actions; $scope.info = val.info; $scope.problem = typeof val.problem === 'undefined' ? false : val.problem; if (val.action) { $scope.actions = [ { action: val.action, name: val.actionName } ]; } $scope.clearAfter = val.clearAfter; statusSet(val); } else { statusCleared(); } }); } app.service('$status', function($rootScope) { var self = this; var listeners = []; function addListener(listener) { listeners.push(listener); } this.addListener = addListener; function removeListener(listener) { for (var i=listener.length-1; i >=0; i--) { if (listeners[i] === listener) { listeners.splice(i, 1); } } } this.removeListener = removeListener; function clear() { $rootScope.status = null; for (var i = 0; i < listeners.length; i++) { listeners[i](null); } } this.clear = clear; $rootScope.clearStatus = clear; this.setStatus = function(val) { $rootScope.status = val; for (var i = 0; i < listeners.length; i++) { listeners[i](val); } }; this.setSuccess = function(val) { self.setStatus($rootScope.status = { msg: val, problem: false }); }; this.setInfo = function(val) { self.setStatus($rootScope.status = { msg: val, info: true }); }; this.setProblem = function(val) { self.setStatus($rootScope.status = { msg: val, problem: true }); }; this.getStatus = function() { return $rootScope.status; }; this.onError = function(err, code) { if (typeof err === 'object' && err.message) { self.setProblem(err.message); } else if (typeof err === 'object') { self.setProblem(JSON.stringify(err)); } else { if (/^<html/.test(err)) { err = err.replace(/<.*?>/g, ''); } self.setProblem(err); } }; this.createErrorHandler = function(cb) { return function(err, code) { self.onError(err, code); if (cb) { cb(err, code); } }; }; }); 